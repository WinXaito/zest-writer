# -*- coding: utf-8 -*-

# Sphinx configuration file - see http://www.sphinx-doc.org/en/stable/config.html

import sys
import os
import os.path as op
from datetime import datetime
from shutil import copyfile, rmtree
from subprocess import Popen, PIPE

ON_RTD = os.environ.get('READTHEDOCS', None) == 'True'
BUILD_DIR = './build/'
SOURCE_DIR = '../src/'
BUILD_RST_DIR = BUILD_DIR + 'rst/'
JAVADOC_RST_DIR = BUILD_RST_DIR + 'javadoc/'
README_PATH = '../readme.rst'
RST_DIR = './rst/'
RTD_README = RST_DIR + '.presentation.rst'
GITHUB_RAW_PATH = 'https://github.com/firm1/zest-writer/blob/master/'

def get_version():
    '''Returns the project version and release as string from 'git describe' command.'''

    pipe = Popen('git describe --tags --always', stdout=PIPE, shell=True)
    desc = pipe.stdout.read().decode('utf-8')

    if desc:
        return desc.split('-', 1)[0], desc
    else:
        return u'unknown', u'unknown'

def copy_readme():
    print '\n*** copying readme file ***\n'
    with open(README_PATH) as infile, open(RTD_README, 'w') as outfile:
        print_on_rtd = True
        for i, line in enumerate(infile.readlines()):
            line = line.replace('<./', '<//')
            line = line.replace('./doc/images/', '../../images/')
            if line.startswith('.. readme_only'):
                print_on_rtd = False
            if line.startswith('.. no_readme_only'):
                print_on_rtd = True

            if i==3:
                line = 'PrÃ©sentation\n'

            if print_on_rtd:
                outfile.write(line)

def copy_rst():
    print '\n*** copying rst files ***\n'

    rst_names = [w[2] for w in os.walk(RST_DIR)][0]

    print 'rst file names: ', rst_names

    for rst_name in rst_names:
        input_path = RST_DIR + rst_name
        output_path = BUILD_RST_DIR + (rst_name if not rst_name[0] == '.' else rst_name[1:])
        with open(input_path) as infile, open(output_path, 'w') as outfile:
            for line in infile.readlines():
                line = line.replace('<\//', '[URL_RESOLVER_ESCAPE]')
                line = line.replace('<//doc/', '<../../../../')
                line = line.replace('<//', '<%s' % GITHUB_RAW_PATH if ON_RTD else '<../../../../../')
                line = line.replace('[URL_RESOLVER_ESCAPE]', '<//')
                outfile.write(line)

def javadoc_build():
    print '\n*** building javadoc ***\n'
    from javasphinx.apidoc import main as build_doc

    main_source_path = op.join(SOURCE_DIR, 'main', 'java')
    main_build_path = op.join(JAVADOC_RST_DIR, 'main')
    javasphinx_params = ['javasphinx-apidoc', '-t', 'Main', '-o', main_build_path, main_source_path]
    print(' '.join(javasphinx_params))
    build_doc(javasphinx_params)

    test_source_path = op.join(SOURCE_DIR, 'test', 'java')
    test_build_path = op.join(JAVADOC_RST_DIR, 'test')
    javasphinx_params = ['javasphinx-apidoc', '-t', 'Test', '-o', test_build_path, test_source_path]
    print(' '.join(javasphinx_params))
    build_doc(javasphinx_params)

if op.exists(BUILD_DIR):
    rmtree(BUILD_DIR)
os.makedirs(BUILD_RST_DIR)

if not ON_RTD:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme
    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

copy_readme()
copy_rst()
javadoc_build()

extensions = [
    'sphinx.ext.todo',
    # 'sphinx.ext.autosectionlabel', # can be enabled locally but this extension is not found from readthdocs.io.
    'javasphinx'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['templates']

# The suffix(es) of source filenames.
source_suffix = ['.rst']

# The encoding of source files.
source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Zest Writer'
author = u'firm1 and other contributors'
copyright = u'%s, %s' % (datetime.now().year, author)

# The version info for the project you're documenting.
version, release = get_version()

# The language for content autogenerated by Sphinx.
language = 'fr'

# Date format for replacing |today|.
today_fmt = '%d/%m/%Y'

# List of patterns, relative to source directory, that match files and directories to ignore when looking for source files.
exclude_patterns = ['rst']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# The name for this set of Sphinx documents.
html_title = u'Documentation de %s %s' % (project, version)

# A shorter title for the navigation bar.
html_short_title = html_title

# The path of an image file to place at the top of the sidebar.
html_logo = 'images/logo.png'

# The path of an image file to use as a favicon of the docs.
html_favicon = 'images/logo.ico'

html_last_updated_fmt = '%d/%m/%Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# If false, no module index is generated.
html_domain_indices = True

# If false, no index is generated.
html_use_index = True

# If true, the index is split into individual pages for each letter.
html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# Language to be used for generating the HTML full-text search index.
html_search_language = 'fr'

# Output file base name for HTML help builder.
htmlhelp_basename = 'ZestWriterdoc'

# How to display URL addresses: 'footnote', 'no', or 'inline'.
texinfo_show_urls = 'footnote'

# The langue used by default in code blocks.
highlight_language = 'shell'
